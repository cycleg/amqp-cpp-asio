PROJECT(amqpasio)
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.0)

# build options
OPTION(AMQPASIO_BUILD_SHARED "Build shared library, if on." OFF)
OPTION(AMQPASIO_BUILD_STATIC "Build static library, if on." ON)
OPTION(AMQPASIO_BUILD_EXAMPLES "Build example applications, if on." OFF)

IF(NOT AMQPASIO_BUILD_SHARED AND NOT AMQPASIO_BUILD_STATIC)
  MESSAGE(FATAL_ERROR "Build shared or static library! Or both.")
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")

SET(CMAKE_INSTALL_PREFIX "/usr/local")
# GNU filesystem layout conventions
INCLUDE(GNUInstallDirs)
IF(EXISTS "/etc/debian_version")
    EXECUTE_PROCESS(COMMAND dpkg-architecture -q DEB_BUILD_GNU_TYPE
        OUTPUT_VARIABLE BUILD_HOST_ARCH
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    IF(NOT (CMAKE_LIBRARY_ARCHITECTURE STREQUAL BUILD_HOST_ARCH))
        IF(AMQPASIO_BUILD_STATIC)
            SET(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/${CMAKE_LIBRARY_ARCHITECTURE}")
        ELSE()
            SET(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_LIBDIR}/${CMAKE_LIBRARY_ARCHITECTURE}")
        ENDIF()
    ENDIF()
ENDIF()

SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)

FIND_PACKAGE(Boost 1.62 COMPONENTS system thread REQUIRED)
FIND_PACKAGE(PkgConfig REQUIRED MODULE)

PKG_CHECK_MODULES(RAPIDJSON REQUIRED RapidJSON>=1.1.0)
PKG_CHECK_MODULES(AMQPCPP REQUIRED amqpcpp>=3.0.0)

SET(CMAKE_CXX_FLAGS "-Wextra -Wall -Wnon-virtual-dtor -fstack-protector-all")

SET(AMQPASIO_VERSION "0.3.2")

SET(HEADERS
    src/AmqpConnectionHandler.hpp
    src/AmqpConnector.hpp
    src/AmqpJsonConverter.hpp
    src/AmqpTransceiver.hpp
    src/AutoReconnect.cpp
)

SET(SOURCES
    src/AmqpConnectionHandler.cpp
    src/AmqpConnector.cpp
    src/AmqpJsonConverter.cpp
    src/AmqpTransceiver.cpp
    src/AutoReconnect.hpp
)

ADD_LIBRARY(objlib OBJECT ${HEADERS} ${SOURCES})

TARGET_INCLUDE_DIRECTORIES(objlib PRIVATE
    ${Boost_INCLUDE_DIR}
    ${RAPIDJSON_INCLUDE_DIRS}
    ${AMQPCPP_INCLUDE_DIRS}
)

IF(AMQPASIO_BUILD_SHARED)
    SET_PROPERTY(TARGET objlib PROPERTY POSITION_INDEPENDENT_CODE ON)
    ADD_LIBRARY(${PROJECT_NAME} SHARED $<TARGET_OBJECTS:objlib>)
    INSTALL(TARGETS ${PROJECT_NAME}
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        RUNTIME DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    )
ENDIF(AMQPASIO_BUILD_SHARED)

IF(AMQPASIO_BUILD_STATIC)
    ADD_LIBRARY(${PROJECT_NAME}_static STATIC $<TARGET_OBJECTS:objlib>)
    SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES
        OUTPUT_NAME ${PROJECT_NAME}
    )
    INSTALL(TARGETS ${PROJECT_NAME}_static
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    )
ENDIF(AMQPASIO_BUILD_STATIC)

SET(PKG_CONFIG_LIBS "-l${PROJECT_NAME}")
CONFIGURE_FILE("${PROJECT_NAME}.pc.in" "${PROJECT_NAME}.pc" @ONLY)
INSTALL(
   FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig"
)

INSTALL(DIRECTORY src/ DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}"
        FILES_MATCHING PATTERN "*.hpp")

IF(AMQPASIO_BUILD_EXAMPLES)
    INCLUDE(FindThreads)
    ADD_EXECUTABLE(receiver examples/receiver.cpp)
    ADD_EXECUTABLE(sender examples/sender.cpp)
    IF(AMQPASIO_BUILD_SHARED)
        ADD_DEPENDENCIES(receiver ${PROJECT_NAME})
        ADD_DEPENDENCIES(sender ${PROJECT_NAME})
    ELSE()
        ADD_DEPENDENCIES(receiver ${PROJECT_NAME}_static)
        ADD_DEPENDENCIES(sender ${PROJECT_NAME}_static)
    ENDIF()
    TARGET_INCLUDE_DIRECTORIES(receiver PRIVATE
        ${Boost_INCLUDE_DIR}
        ${RAPIDJSON_INCLUDE_DIRS}
        ${AMQPCPP_INCLUDE_DIRS}
    )
    TARGET_LINK_DIRECTORIES(receiver PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}
    )
    TARGET_LINK_LIBRARIES(receiver
        ${Boost_SYSTEM_LIBRARY}
        ${PKG_CONFIG_LIBS}
        -lamqpcpp
        ${CMAKE_THREAD_LIBS_INIT}
    )
    TARGET_INCLUDE_DIRECTORIES(sender PRIVATE
        ${Boost_INCLUDE_DIR}
        ${RAPIDJSON_INCLUDE_DIRS}
        ${AMQPCPP_INCLUDE_DIRS}
    )
    TARGET_LINK_DIRECTORIES(sender PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}
    )
    TARGET_LINK_LIBRARIES(sender
        ${Boost_SYSTEM_LIBRARY}
        ${PKG_CONFIG_LIBS}
        -lamqpcpp
        ${CMAKE_THREAD_LIBS_INIT}
    )
ENDIF(AMQPASIO_BUILD_EXAMPLES)

### CPack

IF(AMQPASIO_BUILD_STATIC)
    SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}-dev")
ELSE(AMQPASIO_BUILD_STATIC)
    SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
ENDIF(AMQPASIO_BUILD_STATIC)

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "C++ library for communicating with a RabbitMQ message broker")
SET(CPACK_PACKAGE_VENDOR "Alexei Golovin")
SET(CPACK_PACKAGE_CONTACT "golovin.alexei@gmail.com")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
SET(CPACK_PACKAGE_VERSION "${AMQPASIO_VERSION}")
STRING(REGEX MATCHALL "[0-9]+|-([A-Za-z0-9_]+)" VERSION_PARTS ${CPACK_PACKAGE_VERSION})
LIST(GET VERSION_PARTS 0 CPACK_PACKAGE_VERSION_MAJOR)
LIST(GET VERSION_PARTS 1 CPACK_PACKAGE_VERSION_MINOR)
LIST(GET VERSION_PARTS 2 CPACK_PACKAGE_VERSION_PATCH)
SET(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})

SET(CPACK_SET_DESTDIR ON)

FIND_PROGRAM(DPKG_CMD dpkg)
IF(DPKG_CMD)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} DEB)
ELSE(DPKG_CMD)
    MESSAGE( STATUS "dpkg binary not found, not building debian package" )
ENDIF(DPKG_CMD)

IF(CPACK_GENERATOR STREQUAL "DEB") # linux (deb)
    SET(CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
    SET(CPACK_DEBIAN_PACKAGE_PRIORITY optional)
    SET(CPACK_DEBIAN_PACKAGE_SECTION libdevel)
    SET(CPACK_DEBIAN_PACKAGE_DEPENDS
        "libc6, libstdc++6, libboost-system1.62.0, libboost-thread1.62.0")
    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER
        "Alexei Golovin <golovin.alexei@gmail.com>")
ENDIF(CPACK_GENERATOR STREQUAL "DEB")

INCLUDE(CPack)
