#pragma once

#include <memory>
#include <boost/asio/steady_timer.hpp>
#include "AmqpConnector.hpp"

namespace amqp {

///
/// Класс-обертка для amqp::Connector, автоматически восстанавливающий соединение с брокером AMQP.

/// Для обеспечения автоматического восстановления соединения после
/// неожиданного разрыва экземпляр класса amqp::Connector "оборачивается" в
/// экземпляр данного класса. Запускается и разрывается обернутое соединение
/// вызовами AutoReconnect::start() и AutoReconnect::stop(). События
/// amqp::Connector "соединение установлено" и "соединение разорвано"
/// перехватываются. Первому назначается обработчик, переданный в качестве
/// аргумента методу start(), второму -- приватный метод restart(). При первом
/// установлении соединения вызывается заданный обработчик. Аналогично, ранее
/// назначенный в amqp::Connector обработчик вызывается при штатном разрыве
/// соединения, или если stop() данного класса вызыается до установки
/// соединения.
///
/// После вызова AutoReconnect::start(), попытки установки (восстановления)
/// соединения будут предприниматься с паузой в 1 секунду до тех пор, пока не
/// будет вызван AutoReconnect::stop().
///
/// Пара методов start() и stop() может вызываться неоднократно.
///
/// "Обернутый" экземпляр amqp::Connector доступен через метод connector().
///
class AutoReconnect
{
  public:
    ///
    /// Фабрика экземпляров класса.
    ///
    /// @param [in] connector Указатель на обслуживаемый коннектор.
    /// @return Указатель на новый экземпляр класса.
    ///
    static std::shared_ptr<AutoReconnect>
      Factory(const std::shared_ptr< amqp::Connector<> >& connector);

    ///
    /// Деструктор.
    ///
    ~AutoReconnect();

    ///
    /// Получить указатель на обслуживаемый экземпляр коннектора.
    ///
    /// @return Указатель на экземпляр коннектора.
    ///
    inline amqp::Connector<>* connector() const { return m_connector.get(); }

    ///
    /// Запустить подключение к брокеру и далее -- коннектор.
    ///
    /// @param [in] callback Обработчик успешного установления соединения.
    ///
    /// Обработчик вызывается один раз, при первом успешном соединении с
    /// брокером. Таким образом, он работает точно так же, как и в самом
    /// коннекторе.
    ///
    /// Если метод вызван повторно до вызова stop(), то не делает ничего.
    ///
    void start(amqp::Connector<>::StartedCallback callback = nullptr);
    ///
    /// Завершить работу с брокером.
    ///
    /// Если метод вызван повторно или до вызова start(), то не делает ничего.
    ///
    void stop();

  private:
    ///
    /// Конструктор.
    ///
    /// @param [in] connector Указатель на обслуживаемый коннектор.
    ///
    AutoReconnect(const std::shared_ptr< amqp::Connector<> >& connector);

    ///
    /// ОБработчик успешного подключения к брокеру.
    ///
    /// При первом успешном установлении соединения запускает обработчик,
    /// назначенный в start().
    ///
    void started();
    ///
    /// Обработчик разрыва соединения с брокером.
    ///
    /// @param [in] code Код причины разрыва.
    ///
    /// При штатном разрыве соединения, или если подключение к брокеру
    /// прервано до первого установления соединения, вызывает обработчик
    /// события, заданный в коннекторе. Таким образом, полностью
    /// воспроизводится логика обработки события в коннекторе.
    ///
    void restart(amqp::Connector<>::ExitCode code);

    std::shared_ptr< amqp::Connector<> > m_connector; ///< Обслуживаемый
                                                      ///< коннектор.
    bool m_started, ///< Флаг, что был вызван start(). 
         m_needStop, ///< Флаг, что соединение нужно разорвать после
                     ///< успешного установления (был вызван stop()).
         m_rerun; ///< Флаг, что после успешного установления соединения
                  ///< amqp::Connector нужно запустить.
    amqp::Connector<>::ExitCallback m_backupExitCallback; ///< Указатель на
                                                          ///< оригинальный
                                                          ///< обработчик
                                                          ///< разрыва
                                                          ///< соединения из
                                                          ///< amqp::Connector.
    amqp::Connector<>::StartedCallback m_startedCallback; ///< Указатель на
                                                          ///< обработчик
                                                          ///< установления
                                                          ///< соединения,
                                                          ///< заданный при
                                                          ///< запуске данного
                                                          ///< экземпляра.
    boost::asio::steady_timer m_timer; ///< Таймер запуска следующей попытки
                                       ///< соединиться с брокером.
};

} // namespace amqp
